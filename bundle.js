(function (d3$1) {
  'use strict';

  /*
  //generate the data
  let features = ["A","B","C","D","E","F","G"];
  let data = [];

  for (var i = 0; i < 3; i++){
      var point = {}
      //each feature will be a random number from 1-9
      features.forEach(f => point[f] = 1 + Math.random() * 8);
      data.push(point);
  }
  */

  const radar = (data,features) => {
    let svg = d3.select("body").append("svg")
        .attr("width", 700)
        .attr("height", 500);
    
    let colors = ["#978F80", "#8E6C8A", "#137B80", "#E6842A", "#E3BA22"];
  //  let colors = ["#003F5C", "#58508D", "#bc5090", "#ff6361", "#ffa600"];
    const height = svg.attr('height');
    const width = svg.attr('width');
    const margin = { top: 40, bottom: 40, left: 40, right: 20 };
    const maxRadius = (height - margin.top - margin.bottom) / 2;
    const numTicks = 5;
    const domainSize = 1;
    const labelBuffer= .1;

    //define over and out
    var over = "ontouchstart" in window ? "touchstart" : "mouseover";
    var out = "ontouchstart" in window ? "touchend" : "mouseout";

    //Draw Circles
    let radialScale = d3.scaleLinear()
        .domain([0,domainSize])
        .range([0, maxRadius]);

    let ticks = [];
    for (var i = 1; i <= numTicks; i++) {
      ticks.push(i/numTicks*domainSize);
    }

    ticks.forEach(t =>
        svg.append("circle")
        .attr("cx", maxRadius + margin.left)
        .attr("cy", maxRadius + margin.top)
        .attr("fill", "none")
        .attr('class','axis-line')
        .attr("stroke-width", 1.5)
        .attr("r", radialScale(t))
    );
    /*
    ticks.forEach(t =>
        svg.append("text")
        .attr("x", 305)
        .attr("y", 300 - radialScale(t))
        .text(t.toString())
    );
    */

    //Plot Axis
    function angleToCoordinate(angle, value){
        let x = -Math.cos(angle) * radialScale(value);
        let y = Math.sin(angle) * radialScale(value);
        return {"x": maxRadius + margin.left + x, "y": maxRadius + margin.top - y};
    }

    for (var i = 0; i < features.length; i++) {
        let ft_name = features[i];
        let angle = (Math.PI / 2) + (2 * Math.PI * i / features.length);
        let line_coordinate = angleToCoordinate(angle, domainSize);
        let label_coordinate = angleToCoordinate(angle, domainSize + labelBuffer);

        //draw axis line
        svg.append("line")
          .attr("x1", maxRadius + margin.left)
          .attr("y1", maxRadius + margin.top)
          .attr("x2", line_coordinate.x)
          .attr("y2", line_coordinate.y)
          .attr('class','axis-line');

        //draw axis label

        svg.append("text")
          .attr("x", label_coordinate.x)
          .attr("y", label_coordinate.y)
          .attr('class','axis-label')
          .text(ft_name);
    }

    //Plot Data
    let line = d3.line()
        .x(d => d.x)
        .y(d => d.y);

    function getPathCoordinates(data_point){
        let coordinates = [];
        for (var i = 0; i < features.length; i++){
            let ft_name = features[i];
            let angle = (Math.PI / 2) + (2 * Math.PI * i / features.length);
            coordinates.push(angleToCoordinate(angle, data_point[ft_name]));
        }    
        coordinates.push(angleToCoordinate(
          (Math.PI / 2) + (2 * Math.PI * 0 / features.length), 
          data_point[features[0]]));

        return coordinates;
    }  
    const legendBox = 25;
    const legendSpacing = 3;
    const legendMargin = 20;
    const legendYStart = maxRadius + margin.top + data.length * (legendBox + legendSpacing) / 2;
    
    for (var i = 0; i < data.length; i ++){
        let d = data[i];
        let color = colors[i];
        let coordinates = getPathCoordinates(d);
      
        //draw legend
        svg.append("rect")
      		.attr("id", `path${i}`)
          .attr('fill',color)
          .attr('width', legendBox)
          .attr('height', legendBox)
          .attr('x', (margin.left + maxRadius) * 2 + legendMargin)
          .attr('y', legendYStart - i * (legendBox + legendSpacing));
      
        svg.append('text')
      		.attr("id", `path${i}`)
          .attr('x', (margin.left + maxRadius) * 2 + legendBox + 1.5 * legendMargin)
          .attr('y', legendYStart + legendBox/2 - i * (legendBox + legendSpacing))
          .attr('class', 'legend')
          .text(data[i].ID);
      
        //draw the path element fill 
        svg.append("path")
          .datum(coordinates)
          .attr("d",line)
          .attr("fill", color)
          .attr("fill-opacity", 0.3)
          .attr("class", "radarArea")
          .attr("stroke-width", 3)
          .attr("stroke", color)
          .attr("stroke-opacity", 0.7)
          .attr("stroke-linejoin", "round")
      		.on(over, function(d){
          	svg.selectAll(".radarArea")
          		.transition(250)
          			.attr("fill-opacity", 0.1)
          			.attr("stroke-opacity", 0.2);
          	d3.select(this)
          		.transition(250)
          			.attr("fill-opacity", 0.7)
          			.attr("stroke-opacity", 0.9);
        	})
      		.on(out, function(d){
          	svg.selectAll(".radarArea")
          		.transition(250)
          			.attr("fill-opacity",0.3)
          			.attr("stroke-opacity", 0.7);
        });
    }};



  d3$1.csv("data.csv").then(data => {
    data.forEach(d=>{
      d.A = +d.A;
      d.B = +d.B;
      d.C = +d.C;
      d.D = +d.D;
      d.E = +d.E;
      d.F = +d.F;
      d.G = +d.G;
      d.H = +d.H;
      d.I = +d.I;
      d.J = +d.J;
      d.K = +d.K;
      d.L = +d.L;
      d.M = +d.M;
      d.N = +d.N;
      d.O = +d.O;
      d.P = +d.P;
      d.Q = +d.Q;
      d.R = +d.R;
      d.S = +d.S;
    });
    var features = ["A","B","C","D","E","F","G","H","I","J","K","L","M","N","O","P","Q","R","S"];
  /*  
    var features = [];
    for(property in data[0]) {
      if(property !== 'ID') {
          features.push({Name: property});
      }
  }
  		console.log(features[0]);
  */
      radar(data,features);
  });

    document.getElementById('path1')
      .addEventListener('hover', function(e) {
      e.currentTarget.setAttribute('fill', '#ff00cc');
    });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydHtcbiAgICAgICAgY3N2XG4gICAgICAgfSBmcm9tICdkMyc7XG5cbi8qXG4vL2dlbmVyYXRlIHRoZSBkYXRhXG5sZXQgZmVhdHVyZXMgPSBbXCJBXCIsXCJCXCIsXCJDXCIsXCJEXCIsXCJFXCIsXCJGXCIsXCJHXCJdO1xubGV0IGRhdGEgPSBbXTtcblxuZm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspe1xuICAgIHZhciBwb2ludCA9IHt9XG4gICAgLy9lYWNoIGZlYXR1cmUgd2lsbCBiZSBhIHJhbmRvbSBudW1iZXIgZnJvbSAxLTlcbiAgICBmZWF0dXJlcy5mb3JFYWNoKGYgPT4gcG9pbnRbZl0gPSAxICsgTWF0aC5yYW5kb20oKSAqIDgpO1xuICAgIGRhdGEucHVzaChwb2ludCk7XG59XG4qL1xuXG5jb25zdCByYWRhciA9IChkYXRhLGZlYXR1cmVzKSA9PiB7XG4gIGxldCBzdmcgPSBkMy5zZWxlY3QoXCJib2R5XCIpLmFwcGVuZChcInN2Z1wiKVxuICAgICAgLmF0dHIoXCJ3aWR0aFwiLCA3MDApXG4gICAgICAuYXR0cihcImhlaWdodFwiLCA1MDApO1xuICBcbiAgbGV0IGNvbG9ycyA9IFtcIiM5NzhGODBcIiwgXCIjOEU2QzhBXCIsIFwiIzEzN0I4MFwiLCBcIiNFNjg0MkFcIiwgXCIjRTNCQTIyXCJdO1xuLy8gIGxldCBjb2xvcnMgPSBbXCIjMDAzRjVDXCIsIFwiIzU4NTA4RFwiLCBcIiNiYzUwOTBcIiwgXCIjZmY2MzYxXCIsIFwiI2ZmYTYwMFwiXTtcbiAgY29uc3QgaGVpZ2h0ID0gc3ZnLmF0dHIoJ2hlaWdodCcpO1xuICBjb25zdCB3aWR0aCA9IHN2Zy5hdHRyKCd3aWR0aCcpO1xuICBjb25zdCBtYXJnaW4gPSB7IHRvcDogNDAsIGJvdHRvbTogNDAsIGxlZnQ6IDQwLCByaWdodDogMjAgfTtcbiAgY29uc3QgbWF4UmFkaXVzID0gKGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tKSAvIDI7XG4gIGNvbnN0IG51bVRpY2tzID0gNTtcbiAgY29uc3QgZG9tYWluU2l6ZSA9IDE7XG4gIGNvbnN0IGxhYmVsQnVmZmVyPSAuMTtcblxuICAvL2RlZmluZSBvdmVyIGFuZCBvdXRcbiAgdmFyIG92ZXIgPSBcIm9udG91Y2hzdGFydFwiIGluIHdpbmRvdyA/IFwidG91Y2hzdGFydFwiIDogXCJtb3VzZW92ZXJcIjtcbiAgdmFyIG91dCA9IFwib250b3VjaHN0YXJ0XCIgaW4gd2luZG93ID8gXCJ0b3VjaGVuZFwiIDogXCJtb3VzZW91dFwiO1xuXG4gIC8vRHJhdyBDaXJjbGVzXG4gIGxldCByYWRpYWxTY2FsZSA9IGQzLnNjYWxlTGluZWFyKClcbiAgICAgIC5kb21haW4oWzAsZG9tYWluU2l6ZV0pXG4gICAgICAucmFuZ2UoWzAsIG1heFJhZGl1c10pO1xuXG4gIGxldCB0aWNrcyA9IFtdXG4gIGZvciAodmFyIGkgPSAxOyBpIDw9IG51bVRpY2tzOyBpKyspIHtcbiAgICB0aWNrcy5wdXNoKGkvbnVtVGlja3MqZG9tYWluU2l6ZSk7XG4gIH1cblxuICB0aWNrcy5mb3JFYWNoKHQgPT5cbiAgICAgIHN2Zy5hcHBlbmQoXCJjaXJjbGVcIilcbiAgICAgIC5hdHRyKFwiY3hcIiwgbWF4UmFkaXVzICsgbWFyZ2luLmxlZnQpXG4gICAgICAuYXR0cihcImN5XCIsIG1heFJhZGl1cyArIG1hcmdpbi50b3ApXG4gICAgICAuYXR0cihcImZpbGxcIiwgXCJub25lXCIpXG4gICAgICAuYXR0cignY2xhc3MnLCdheGlzLWxpbmUnKVxuICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMS41KVxuICAgICAgLmF0dHIoXCJyXCIsIHJhZGlhbFNjYWxlKHQpKVxuICApO1xuICAvKlxuICB0aWNrcy5mb3JFYWNoKHQgPT5cbiAgICAgIHN2Zy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAuYXR0cihcInhcIiwgMzA1KVxuICAgICAgLmF0dHIoXCJ5XCIsIDMwMCAtIHJhZGlhbFNjYWxlKHQpKVxuICAgICAgLnRleHQodC50b1N0cmluZygpKVxuICApO1xuICAqL1xuXG4gIC8vUGxvdCBBeGlzXG4gIGZ1bmN0aW9uIGFuZ2xlVG9Db29yZGluYXRlKGFuZ2xlLCB2YWx1ZSl7XG4gICAgICBsZXQgeCA9IC1NYXRoLmNvcyhhbmdsZSkgKiByYWRpYWxTY2FsZSh2YWx1ZSk7XG4gICAgICBsZXQgeSA9IE1hdGguc2luKGFuZ2xlKSAqIHJhZGlhbFNjYWxlKHZhbHVlKTtcbiAgICAgIHJldHVybiB7XCJ4XCI6IG1heFJhZGl1cyArIG1hcmdpbi5sZWZ0ICsgeCwgXCJ5XCI6IG1heFJhZGl1cyArIG1hcmdpbi50b3AgLSB5fTtcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgZmVhdHVyZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBmdF9uYW1lID0gZmVhdHVyZXNbaV07XG4gICAgICBsZXQgYW5nbGUgPSAoTWF0aC5QSSAvIDIpICsgKDIgKiBNYXRoLlBJICogaSAvIGZlYXR1cmVzLmxlbmd0aCk7XG4gICAgICBsZXQgbGluZV9jb29yZGluYXRlID0gYW5nbGVUb0Nvb3JkaW5hdGUoYW5nbGUsIGRvbWFpblNpemUpO1xuICAgICAgbGV0IGxhYmVsX2Nvb3JkaW5hdGUgPSBhbmdsZVRvQ29vcmRpbmF0ZShhbmdsZSwgZG9tYWluU2l6ZSArIGxhYmVsQnVmZmVyKTtcblxuICAgICAgLy9kcmF3IGF4aXMgbGluZVxuICAgICAgc3ZnLmFwcGVuZChcImxpbmVcIilcbiAgICAgICAgLmF0dHIoXCJ4MVwiLCBtYXhSYWRpdXMgKyBtYXJnaW4ubGVmdClcbiAgICAgICAgLmF0dHIoXCJ5MVwiLCBtYXhSYWRpdXMgKyBtYXJnaW4udG9wKVxuICAgICAgICAuYXR0cihcIngyXCIsIGxpbmVfY29vcmRpbmF0ZS54KVxuICAgICAgICAuYXR0cihcInkyXCIsIGxpbmVfY29vcmRpbmF0ZS55KVxuICAgICAgICAuYXR0cignY2xhc3MnLCdheGlzLWxpbmUnKTtcblxuICAgICAgLy9kcmF3IGF4aXMgbGFiZWxcblxuICAgICAgc3ZnLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgLmF0dHIoXCJ4XCIsIGxhYmVsX2Nvb3JkaW5hdGUueClcbiAgICAgICAgLmF0dHIoXCJ5XCIsIGxhYmVsX2Nvb3JkaW5hdGUueSlcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywnYXhpcy1sYWJlbCcpXG4gICAgICAgIC50ZXh0KGZ0X25hbWUpO1xuICB9XG5cbiAgLy9QbG90IERhdGFcbiAgbGV0IGxpbmUgPSBkMy5saW5lKClcbiAgICAgIC54KGQgPT4gZC54KVxuICAgICAgLnkoZCA9PiBkLnkpO1xuXG4gIGZ1bmN0aW9uIGdldFBhdGhDb29yZGluYXRlcyhkYXRhX3BvaW50KXtcbiAgICAgIGxldCBjb29yZGluYXRlcyA9IFtdO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmZWF0dXJlcy5sZW5ndGg7IGkrKyl7XG4gICAgICAgICAgbGV0IGZ0X25hbWUgPSBmZWF0dXJlc1tpXTtcbiAgICAgICAgICBsZXQgYW5nbGUgPSAoTWF0aC5QSSAvIDIpICsgKDIgKiBNYXRoLlBJICogaSAvIGZlYXR1cmVzLmxlbmd0aCk7XG4gICAgICAgICAgY29vcmRpbmF0ZXMucHVzaChhbmdsZVRvQ29vcmRpbmF0ZShhbmdsZSwgZGF0YV9wb2ludFtmdF9uYW1lXSkpO1xuICAgICAgfTtcbiAgICBcbiAgICAgIGNvb3JkaW5hdGVzLnB1c2goYW5nbGVUb0Nvb3JkaW5hdGUoXG4gICAgICAgIChNYXRoLlBJIC8gMikgKyAoMiAqIE1hdGguUEkgKiAwIC8gZmVhdHVyZXMubGVuZ3RoKSwgXG4gICAgICAgIGRhdGFfcG9pbnRbZmVhdHVyZXNbMF1dKSk7XG5cbiAgICAgIHJldHVybiBjb29yZGluYXRlcztcbiAgfTtcbiAgXG4gIGNvbnN0IGxlZ2VuZEJveCA9IDI1O1xuICBjb25zdCBsZWdlbmRTcGFjaW5nID0gMztcbiAgY29uc3QgbGVnZW5kTWFyZ2luID0gMjA7XG4gIGNvbnN0IGxlZ2VuZFlTdGFydCA9IG1heFJhZGl1cyArIG1hcmdpbi50b3AgKyBkYXRhLmxlbmd0aCAqIChsZWdlbmRCb3ggKyBsZWdlbmRTcGFjaW5nKSAvIDI7XG4gIFxuICBmb3IgKHZhciBpID0gMDsgaSA8IGRhdGEubGVuZ3RoOyBpICsrKXtcbiAgICAgIGxldCBkID0gZGF0YVtpXTtcbiAgICAgIGxldCBjb2xvciA9IGNvbG9yc1tpXTtcbiAgICAgIGxldCBjb29yZGluYXRlcyA9IGdldFBhdGhDb29yZGluYXRlcyhkKTtcbiAgICBcbiAgICAgIC8vZHJhdyBsZWdlbmRcbiAgICAgIHN2Zy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgXHRcdC5hdHRyKFwiaWRcIiwgYHBhdGgke2l9YClcbiAgICAgICAgLmF0dHIoJ2ZpbGwnLGNvbG9yKVxuICAgICAgICAuYXR0cignd2lkdGgnLCBsZWdlbmRCb3gpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBsZWdlbmRCb3gpXG4gICAgICAgIC5hdHRyKCd4JywgKG1hcmdpbi5sZWZ0ICsgbWF4UmFkaXVzKSAqIDIgKyBsZWdlbmRNYXJnaW4pXG4gICAgICAgIC5hdHRyKCd5JywgbGVnZW5kWVN0YXJ0IC0gaSAqIChsZWdlbmRCb3ggKyBsZWdlbmRTcGFjaW5nKSk7XG4gICAgXG4gICAgICBzdmcuYXBwZW5kKCd0ZXh0JylcbiAgICBcdFx0LmF0dHIoXCJpZFwiLCBgcGF0aCR7aX1gKVxuICAgICAgICAuYXR0cigneCcsIChtYXJnaW4ubGVmdCArIG1heFJhZGl1cykgKiAyICsgbGVnZW5kQm94ICsgMS41ICogbGVnZW5kTWFyZ2luKVxuICAgICAgICAuYXR0cigneScsIGxlZ2VuZFlTdGFydCArIGxlZ2VuZEJveC8yIC0gaSAqIChsZWdlbmRCb3ggKyBsZWdlbmRTcGFjaW5nKSlcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xlZ2VuZCcpXG4gICAgICAgIC50ZXh0KGRhdGFbaV0uSUQpO1xuICAgIFxuICAgICAgLy9kcmF3IHRoZSBwYXRoIGVsZW1lbnQgZmlsbCBcbiAgICAgIHN2Zy5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgIC5kYXR1bShjb29yZGluYXRlcylcbiAgICAgICAgLmF0dHIoXCJkXCIsbGluZSlcbiAgICAgICAgLmF0dHIoXCJmaWxsXCIsIGNvbG9yKVxuICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjMpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJyYWRhckFyZWFcIilcbiAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMylcbiAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgY29sb3IpXG4gICAgICAgIC5hdHRyKFwic3Ryb2tlLW9wYWNpdHlcIiwgMC43KVxuICAgICAgICAuYXR0cihcInN0cm9rZS1saW5lam9pblwiLCBcInJvdW5kXCIpXG4gICAgXHRcdC5vbihvdmVyLCBmdW5jdGlvbihkKXtcbiAgICAgICAgXHR0b29sdGlwU2hvdztcbiAgICAgICAgXHRzdmcuc2VsZWN0QWxsKFwiLnJhZGFyQXJlYVwiKVxuICAgICAgICBcdFx0LnRyYW5zaXRpb24oMjUwKVxuICAgICAgICBcdFx0XHQuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwLjEpXG4gICAgICAgIFx0XHRcdC5hdHRyKFwic3Ryb2tlLW9wYWNpdHlcIiwgMC4yKTtcbiAgICAgICAgXHRkMy5zZWxlY3QodGhpcylcbiAgICAgICAgXHRcdC50cmFuc2l0aW9uKDI1MClcbiAgICAgICAgXHRcdFx0LmF0dHIoXCJmaWxsLW9wYWNpdHlcIiwgMC43KVxuICAgICAgICBcdFx0XHQuYXR0cihcInN0cm9rZS1vcGFjaXR5XCIsIDAuOSk7XG4gICAgICBcdH0pXG4gICAgXHRcdC5vbihvdXQsIGZ1bmN0aW9uKGQpe1xuICAgICAgICBcdHRvb2x0aXBIaWRlO1xuICAgICAgICBcdHN2Zy5zZWxlY3RBbGwoXCIucmFkYXJBcmVhXCIpXG4gICAgICAgIFx0XHQudHJhbnNpdGlvbigyNTApXG4gICAgICAgIFx0XHRcdC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsMC4zKVxuICAgICAgICBcdFx0XHQuYXR0cihcInN0cm9rZS1vcGFjaXR5XCIsIDAuNyk7XG4gICAgICB9KTtcbiAgfTtcbiAgZnVuY3Rpb24gdG9vbHRpcFNob3coZCl7XG5cbiAgfTtcbiAgZnVuY3Rpb24gdG9vbHRpcEhpZGUoZCl7XG4gICAgXG4gIH07XG59O1xuXG5cblxuY3N2KFwiZGF0YS5jc3ZcIikudGhlbihkYXRhID0+IHtcbiAgZGF0YS5mb3JFYWNoKGQ9PntcbiAgICBkLkEgPSArZC5BO1xuICAgIGQuQiA9ICtkLkI7XG4gICAgZC5DID0gK2QuQztcbiAgICBkLkQgPSArZC5EO1xuICAgIGQuRSA9ICtkLkU7XG4gICAgZC5GID0gK2QuRjtcbiAgICBkLkcgPSArZC5HO1xuICAgIGQuSCA9ICtkLkg7XG4gICAgZC5JID0gK2QuSTtcbiAgICBkLkogPSArZC5KO1xuICAgIGQuSyA9ICtkLks7XG4gICAgZC5MID0gK2QuTDtcbiAgICBkLk0gPSArZC5NO1xuICAgIGQuTiA9ICtkLk47XG4gICAgZC5PID0gK2QuTztcbiAgICBkLlAgPSArZC5QO1xuICAgIGQuUSA9ICtkLlE7XG4gICAgZC5SID0gK2QuUjtcbiAgICBkLlMgPSArZC5TO1xuICB9KTtcbiAgdmFyIGZlYXR1cmVzID0gW1wiQVwiLFwiQlwiLFwiQ1wiLFwiRFwiLFwiRVwiLFwiRlwiLFwiR1wiLFwiSFwiLFwiSVwiLFwiSlwiLFwiS1wiLFwiTFwiLFwiTVwiLFwiTlwiLFwiT1wiLFwiUFwiLFwiUVwiLFwiUlwiLFwiU1wiXTtcbi8qICBcbiAgdmFyIGZlYXR1cmVzID0gW107XG4gIGZvcihwcm9wZXJ0eSBpbiBkYXRhWzBdKSB7XG4gICAgaWYocHJvcGVydHkgIT09ICdJRCcpIHtcbiAgICAgICAgZmVhdHVyZXMucHVzaCh7TmFtZTogcHJvcGVydHl9KTtcbiAgICB9XG59XG5cdFx0Y29uc29sZS5sb2coZmVhdHVyZXNbMF0pO1xuKi9cbiAgICByYWRhcihkYXRhLGZlYXR1cmVzKTtcbn0pXG5cbiAgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ3BhdGgxJylcbiAgICAuYWRkRXZlbnRMaXN0ZW5lcignaG92ZXInLCBmdW5jdGlvbihlKSB7XG4gICAgZS5jdXJyZW50VGFyZ2V0LnNldEF0dHJpYnV0ZSgnZmlsbCcsICcjZmYwMGNjJyk7XG4gIH0pO1xuIl0sIm5hbWVzIjpbImNzdiJdLCJtYXBwaW5ncyI6Ijs7O0VBSUE7RUFDQTtFQUNBO0VBQ0E7QUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FBQ0E7RUFDQSxNQUFNLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLEtBQUs7RUFDakMsRUFBRSxJQUFJLEdBQUcsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUM7RUFDM0MsT0FBTyxJQUFJLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQztFQUN6QixPQUFPLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDM0I7RUFDQSxFQUFFLElBQUksTUFBTSxHQUFHLENBQUMsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0VBQ3ZFO0VBQ0EsRUFBRSxNQUFNLE1BQU0sR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0VBQ3BDLEVBQUUsTUFBTSxLQUFLLEdBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUNsQyxFQUFFLE1BQU0sTUFBTSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLElBQUksRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEVBQUUsRUFBRSxDQUFDO0VBQzlELEVBQUUsTUFBTSxTQUFTLEdBQUcsQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxNQUFNLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQztFQUM5RCxFQUFFLE1BQU0sUUFBUSxHQUFHLENBQUMsQ0FBQztFQUNyQixFQUFFLE1BQU0sVUFBVSxHQUFHLENBQUMsQ0FBQztFQUN2QixFQUFFLE1BQU0sV0FBVyxFQUFFLEVBQUUsQ0FBQztBQUN4QjtFQUNBO0VBQ0EsRUFBRSxJQUFJLElBQUksR0FBRyxjQUFjLElBQUksTUFBTSxHQUFHLFlBQVksR0FBRyxXQUFXLENBQUM7RUFDbkUsRUFBRSxJQUFJLEdBQUcsR0FBRyxjQUFjLElBQUksTUFBTSxHQUFHLFVBQVUsR0FBRyxVQUFVLENBQUM7QUFDL0Q7RUFDQTtFQUNBLEVBQUUsSUFBSSxXQUFXLEdBQUcsRUFBRSxDQUFDLFdBQVcsRUFBRTtFQUNwQyxPQUFPLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQztFQUM3QixPQUFPLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxDQUFDO0FBQzdCO0VBQ0EsRUFBRSxJQUFJLEtBQUssR0FBRyxHQUFFO0VBQ2hCLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxJQUFJLFFBQVEsRUFBRSxDQUFDLEVBQUUsRUFBRTtFQUN0QyxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsQ0FBQztFQUN0QyxHQUFHO0FBQ0g7RUFDQSxFQUFFLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUNqQixNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDO0VBQzFCLE9BQU8sSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztFQUMxQyxPQUFPLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUM7RUFDekMsT0FBTyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQztFQUMzQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDO0VBQ2hDLE9BQU8sSUFBSSxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUM7RUFDaEMsT0FBTyxJQUFJLENBQUMsR0FBRyxFQUFFLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNoQyxHQUFHLENBQUM7RUFDSjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0FBQ0E7RUFDQTtFQUNBLEVBQUUsU0FBUyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsS0FBSyxDQUFDO0VBQzFDLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztFQUNwRCxNQUFNLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDO0VBQ25ELE1BQU0sT0FBTyxDQUFDLEdBQUcsRUFBRSxTQUFTLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxDQUFDLEVBQUUsR0FBRyxFQUFFLFNBQVMsR0FBRyxNQUFNLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO0VBQ2pGLEdBQUc7QUFDSDtFQUNBLEVBQUUsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7RUFDNUMsTUFBTSxJQUFJLE9BQU8sR0FBRyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDaEMsTUFBTSxJQUFJLEtBQUssR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7RUFDdEUsTUFBTSxJQUFJLGVBQWUsR0FBRyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLENBQUM7RUFDakUsTUFBTSxJQUFJLGdCQUFnQixHQUFHLGlCQUFpQixDQUFDLEtBQUssRUFBRSxVQUFVLEdBQUcsV0FBVyxDQUFDLENBQUM7QUFDaEY7RUFDQTtFQUNBLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7RUFDeEIsU0FBUyxJQUFJLENBQUMsSUFBSSxFQUFFLFNBQVMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO0VBQzVDLFNBQVMsSUFBSSxDQUFDLElBQUksRUFBRSxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQztFQUMzQyxTQUFTLElBQUksQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztFQUN0QyxTQUFTLElBQUksQ0FBQyxJQUFJLEVBQUUsZUFBZSxDQUFDLENBQUMsQ0FBQztFQUN0QyxTQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLENBQUM7QUFDbkM7RUFDQTtBQUNBO0VBQ0EsTUFBTSxHQUFHLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztFQUN4QixTQUFTLElBQUksQ0FBQyxHQUFHLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0VBQ3RDLFNBQVMsSUFBSSxDQUFDLEdBQUcsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7RUFDdEMsU0FBUyxJQUFJLENBQUMsT0FBTyxDQUFDLFlBQVksQ0FBQztFQUNuQyxTQUFTLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztFQUN2QixHQUFHO0FBQ0g7RUFDQTtFQUNBLEVBQUUsSUFBSSxJQUFJLEdBQUcsRUFBRSxDQUFDLElBQUksRUFBRTtFQUN0QixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNsQixPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25CO0VBQ0EsRUFBRSxTQUFTLGtCQUFrQixDQUFDLFVBQVUsQ0FBQztFQUN6QyxNQUFNLElBQUksV0FBVyxHQUFHLEVBQUUsQ0FBQztFQUMzQixNQUFNLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxRQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDO0VBQy9DLFVBQVUsSUFBSSxPQUFPLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3BDLFVBQVUsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0VBQzFFLFVBQVUsV0FBVyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxLQUFLLEVBQUUsVUFBVSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUMxRSxPQUNBO0VBQ0EsTUFBTSxXQUFXLENBQUMsSUFBSSxDQUFDLGlCQUFpQjtFQUN4QyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsR0FBRyxDQUFDLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxFQUFFLEdBQUcsQ0FBQyxHQUFHLFFBQVEsQ0FBQyxNQUFNLENBQUM7RUFDM0QsUUFBUSxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ2xDO0VBQ0EsTUFBTSxPQUFPLFdBQVcsQ0FBQztFQUN6QixHQUNBO0VBQ0EsRUFBRSxNQUFNLFNBQVMsR0FBRyxFQUFFLENBQUM7RUFDdkIsRUFBRSxNQUFNLGFBQWEsR0FBRyxDQUFDLENBQUM7RUFDMUIsRUFBRSxNQUFNLFlBQVksR0FBRyxFQUFFLENBQUM7RUFDMUIsRUFBRSxNQUFNLFlBQVksR0FBRyxTQUFTLEdBQUcsTUFBTSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsTUFBTSxJQUFJLFNBQVMsR0FBRyxhQUFhLENBQUMsR0FBRyxDQUFDLENBQUM7RUFDOUY7RUFDQSxFQUFFLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBRyxDQUFDO0VBQ3hDLE1BQU0sSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ3RCLE1BQU0sSUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQzVCLE1BQU0sSUFBSSxXQUFXLEdBQUcsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDOUM7RUFDQTtFQUNBLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7RUFDeEIsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDN0IsU0FBUyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztFQUMzQixTQUFTLElBQUksQ0FBQyxPQUFPLEVBQUUsU0FBUyxDQUFDO0VBQ2pDLFNBQVMsSUFBSSxDQUFDLFFBQVEsRUFBRSxTQUFTLENBQUM7RUFDbEMsU0FBUyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxTQUFTLElBQUksQ0FBQyxHQUFHLFlBQVksQ0FBQztFQUNoRSxTQUFTLElBQUksQ0FBQyxHQUFHLEVBQUUsWUFBWSxHQUFHLENBQUMsSUFBSSxTQUFTLEdBQUcsYUFBYSxDQUFDLENBQUMsQ0FBQztFQUNuRTtFQUNBLE1BQU0sR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7RUFDeEIsT0FBTyxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDN0IsU0FBUyxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLElBQUksR0FBRyxTQUFTLElBQUksQ0FBQyxHQUFHLFNBQVMsR0FBRyxHQUFHLEdBQUcsWUFBWSxDQUFDO0VBQ2xGLFNBQVMsSUFBSSxDQUFDLEdBQUcsRUFBRSxZQUFZLEdBQUcsU0FBUyxDQUFDLENBQUMsR0FBRyxDQUFDLElBQUksU0FBUyxHQUFHLGFBQWEsQ0FBQyxDQUFDO0VBQ2hGLFNBQVMsSUFBSSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7RUFDaEMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDO0VBQzFCO0VBQ0E7RUFDQSxNQUFNLEdBQUcsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO0VBQ3hCLFNBQVMsS0FBSyxDQUFDLFdBQVcsQ0FBQztFQUMzQixTQUFTLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDO0VBQ3ZCLFNBQVMsSUFBSSxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUM7RUFDNUIsU0FBUyxJQUFJLENBQUMsY0FBYyxFQUFFLEdBQUcsQ0FBQztFQUNsQyxTQUFTLElBQUksQ0FBQyxPQUFPLEVBQUUsV0FBVyxDQUFDO0VBQ25DLFNBQVMsSUFBSSxDQUFDLGNBQWMsRUFBRSxDQUFDLENBQUM7RUFDaEMsU0FBUyxJQUFJLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQztFQUM5QixTQUFTLElBQUksQ0FBQyxnQkFBZ0IsRUFBRSxHQUFHLENBQUM7RUFDcEMsU0FBUyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDO0VBQ3pDLE9BQU8sRUFBRSxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztFQUUzQixTQUFTLEdBQUcsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDO0VBQ3BDLFdBQVcsVUFBVSxDQUFDLEdBQUcsQ0FBQztFQUMxQixZQUFZLElBQUksQ0FBQyxjQUFjLEVBQUUsR0FBRyxDQUFDO0VBQ3JDLFlBQVksSUFBSSxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxDQUFDO0VBQ3hDLFNBQVMsRUFBRSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7RUFDeEIsV0FBVyxVQUFVLENBQUMsR0FBRyxDQUFDO0VBQzFCLFlBQVksSUFBSSxDQUFDLGNBQWMsRUFBRSxHQUFHLENBQUM7RUFDckMsWUFBWSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDeEMsUUFBUSxDQUFDO0VBQ1QsT0FBTyxFQUFFLENBQUMsR0FBRyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0VBRTFCLFNBQVMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxZQUFZLENBQUM7RUFDcEMsV0FBVyxVQUFVLENBQUMsR0FBRyxDQUFDO0VBQzFCLFlBQVksSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUM7RUFDcEMsWUFBWSxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsR0FBRyxDQUFDLENBQUM7RUFDeEMsT0FBTyxDQUFDLENBQUM7RUFDVCxHQU9BLENBQUMsQ0FBQztBQUNGO0FBQ0E7QUFDQTtBQUNBQSxVQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSTtFQUM3QixFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxFQUFFO0VBQ2xCLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDZixJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0VBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztFQUNmLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7RUFDZixHQUFHLENBQUMsQ0FBQztFQUNMLEVBQUUsSUFBSSxRQUFRLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztFQUMvRjtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7RUFDekIsQ0FBQyxFQUFDO0FBQ0Y7RUFDQSxFQUFFLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDO0VBQ2xDLEtBQUssZ0JBQWdCLENBQUMsT0FBTyxFQUFFLFNBQVMsQ0FBQyxFQUFFO0VBQzNDLElBQUksQ0FBQyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsTUFBTSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0VBQ3BELEdBQUcsQ0FBQzs7OzsifQ==